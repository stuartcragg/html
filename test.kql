// Query to find Storage Accounts without backup by cross-referencing
// with actual backup instances in Azure Backup Vaults
// Excludes storage accounts with 'backup:none' tag

// Step 1: Get all storage accounts (excluding backup:none tagged ones)
let storageAccounts = resources
| where type =~ 'Microsoft.Storage/storageAccounts'
| extend backupTag = tostring(tags['backup'])
| where backupTag != "none"  // Exclude explicitly excluded accounts
| extend resourceId = tolower(tostring(id))
| project resourceId, name, resourceGroup, location, subscriptionId, backupTag, tags;

// Step 2: Get all backup instances from Backup Vaults
let backupInstances = RecoveryServicesResources
| where type =~ 'Microsoft.DataProtection/backupVaults/backupInstances'
| extend dataSourceId = tolower(tostring(properties.dataSourceInfo.resourceID))
| where isnotempty(dataSourceId)
| where dataSourceId contains "microsoft.storage/storageaccounts"  // Only storage account backups
| project dataSourceId, backupInstanceName = name, vaultName = split(id, '/')[8];

// Step 3: Find storage accounts NOT in backup instances
storageAccounts
| join kind=leftouter backupInstances on $left.resourceId == $right.dataSourceId
| where isnull(dataSourceId)  // Storage accounts without backup
| project 
    StorageAccountName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SubscriptionId = subscriptionId,
    BackupTag = backupTag,
    BackupStatus = "‚ùå No Backup Configured",
    ShouldHaveBackup = case(
        isempty(backupTag), "‚ö†Ô∏è No backup tag - needs review",
        backupTag == "weekly", "‚ùå Tagged for backup but not configured",
        strcat("üîç Has tag '", backupTag, "' - verify if backup needed")
    ),
    ResourceId = resourceId
| sort by ShouldHaveBackup desc, StorageAccountName asc
