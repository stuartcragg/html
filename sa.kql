Resources
| where type == "microsoft.storage/storageaccounts"
| extend 
    // Check backup tag (case insensitive)
    backupTagValue = case(
        isnotempty(tags.backup), tags.backup,
        isnotempty(tags.Backup), tags.Backup,
        isnotempty(tags.BACKUP), tags.BACKUP,
        isnotempty(tags.BackUp), tags.BackUp,
        isnotempty(tags.backUp), tags.backUp,
        "not-set"
    )
| where
    // Include only if backup tag exists AND is NOT "none"
    (backupTagValue != "not-set") and 
    (tolower(backupTagValue) != "none")
| join kind=leftouter (
    // Check for vaulted backup instances in backup vaults
    Resources
    | where type == "microsoft.dataprotection/backupvaults/backupinstances"
    | where properties.dataSourceInfo.datasourceType == "Microsoft.Storage/storageAccounts/blobServices"
    | project backupInstanceId = id, 
              protectedStorageAccount = properties.dataSourceInfo.resourceID,
              backupVaultName = split(id, '/')[8],
              protectionState = properties.currentProtectionState
) on $left.id == $right.protectedStorageAccount
| extend 
    // Check for soft delete configuration using correct property path
    softDeleteEnabled = tobool(properties.blobServices.default.deleteRetentionPolicy.enabled),
    softDeleteDays = toint(properties.blobServices.default.deleteRetentionPolicy.days),
    
    // Check for versioning using correct property path  
    versioningEnabled = tobool(properties.blobServices.default.isVersioningEnabled),
    
    // Check for operational backup (point-in-time restore)
    operationalBackupEnabled = tobool(properties.blobServices.default.restorePolicy.enabled),
    restoreDays = toint(properties.blobServices.default.restorePolicy.days),
    
    // Determine if vaulted backup is configured
    vaultedBackupConfigured = isnotempty(backupInstanceId)
| where 
    // Filter for storage accounts WITHOUT proper backup protection
    (vaultedBackupConfigured != true) or 
    (softDeleteEnabled != true) or 
    (versioningEnabled != true) or
    (operationalBackupEnabled != true)
| project 
    StorageAccountName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SubscriptionId = subscriptionId,
    StorageKind = kind,
    AccessTier = sku.tier,
    
    // Show backup tag status
    BackupTag = case(
        backupTagValue == "not-set", "No backup tag",
        tolower(backupTagValue) == "none", "Backup: none", 
        strcat("Backup: ", backupTagValue)
    ),
    
    // Backup configuration status
    VaultedBackup = case(
        vaultedBackupConfigured == true, strcat("Protected (", backupVaultName, ")"),
        "No Vaulted Backup"
    ),
    OperationalBackup = case(
        operationalBackupEnabled == true, strcat("Enabled (", restoreDays, " days)"),
        "Disabled"
    ),
    SoftDelete = case(
        softDeleteEnabled == true, strcat("Enabled (", softDeleteDays, " days)"),
        "Disabled"
    ),
    Versioning = case(
        versioningEnabled == true, "Enabled",
        "Disabled"
    ),
    
    // Overall backup status
    BackupStatus = case(
        vaultedBackupConfigured == true and softDeleteEnabled == true and versioningEnabled == true, "Fully Protected",
        vaultedBackupConfigured == true, "Partially Protected",
        "Not Protected"
    )
| order by BackupStatus desc, StorageAccountName asc
